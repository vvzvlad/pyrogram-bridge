# pylint: disable=protected-access, wrong-import-position

import unittest
from unittest.mock import MagicMock, PropertyMock
import sys
import os
# Add project root to sys.path to find post_parser
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))

# Mock the config module
sys.modules['config'] = __import__('tests.mock_config', fromlist=['get_settings'])

from pyrogram.types import Message, Document
from pyrogram.enums import MessageMediaType
from post_parser import PostParser

class TestPostParserGenerateTitle(unittest.TestCase):

    def setUp(self):
        self.client_mock = MagicMock()
        self.parser = PostParser(self.client_mock)
        
    def tearDown(self):
        pass

    def _create_mock_message(self, media=None, text=None, caption=None, document_mime_type=None, channel_chat_created=False, web_page=None, poll=None, service=None):
        message = MagicMock(spec=Message)
        message.media = media
        message.text = text
        message.caption = caption
        message.web_page = web_page
        message.channel_chat_created = channel_chat_created
        message.poll = poll
        message.service = service

        # Mock document properties if document exists
        if document_mime_type:
            doc_mock = MagicMock(spec=Document)
            type(doc_mock).mime_type = PropertyMock(return_value=document_mime_type)
            message.document = doc_mock
        else:
            message.document = None # Ensure document is None if no mime type provided

        return message

    def test_generate_title_media_photo(self):
        message = self._create_mock_message(media=MessageMediaType.PHOTO)
        self.assertEqual(self.parser._generate_title(message), "üì∑ Photo")

    def test_generate_title_media_video(self):
        message = self._create_mock_message(media=MessageMediaType.VIDEO)
        self.assertEqual(self.parser._generate_title(message), "üé• Video")

    def test_generate_title_media_animation(self):
        message = self._create_mock_message(media=MessageMediaType.ANIMATION)
        self.assertEqual(self.parser._generate_title(message), "üéû GIF")

    def test_generate_title_media_audio(self):
        message = self._create_mock_message(media=MessageMediaType.AUDIO)
        self.assertEqual(self.parser._generate_title(message), "üéµ Audio")

    def test_generate_title_media_voice(self):
        message = self._create_mock_message(media=MessageMediaType.VOICE)
        self.assertEqual(self.parser._generate_title(message), "üé§ Voice")

    def test_generate_title_media_video_note(self):
        message = self._create_mock_message(media=MessageMediaType.VIDEO_NOTE)
        self.assertEqual(self.parser._generate_title(message), "üì± Video circle")

    def test_generate_title_media_sticker(self):
        message = self._create_mock_message(media=MessageMediaType.STICKER)
        self.assertEqual(self.parser._generate_title(message), "üéØ Sticker")

    def test_generate_title_media_pdf_document(self):
        message = self._create_mock_message(media=MessageMediaType.DOCUMENT, document_mime_type='application/pdf')
        self.assertEqual(self.parser._generate_title(message), "üìÑ PDF Document")

    def test_generate_title_media_other_document(self):
        message = self._create_mock_message(media=MessageMediaType.DOCUMENT, document_mime_type='image/jpeg')
        self.assertEqual(self.parser._generate_title(message), "üìé Document")

    def test_generate_title_channel_created(self):
        mock_service = MagicMock()
        mock_service.__str__ = MagicMock(return_value="pyrogram.enums.MessageService.CHANNEL_CHAT_CREATED")
        message = self._create_mock_message(service=mock_service, channel_chat_created=False) # channel_chat_created flag is now secondary
        self.assertEqual(self.parser._generate_title(message), "‚ú® Chat created")

    def test_generate_title_pinned_message(self):
        mock_service = MagicMock()
        mock_service.__str__ = MagicMock(return_value="pyrogram.enums.MessageService.PINNED_MESSAGE")
        message = self._create_mock_message(service=mock_service)
        self.assertEqual(self.parser._generate_title(message), "üìå Pinned message")

    def test_generate_title_new_chat_photo(self):
        mock_service = MagicMock()
        mock_service.__str__ = MagicMock(return_value="pyrogram.enums.MessageService.NEW_CHAT_PHOTO")
        message = self._create_mock_message(service=mock_service)
        self.assertEqual(self.parser._generate_title(message), "üñº New chat photo")

    def test_generate_title_new_chat_title(self):
        mock_service = MagicMock()
        mock_service.__str__ = MagicMock(return_value="pyrogram.enums.MessageService.NEW_CHAT_TITLE")
        message = self._create_mock_message(service=mock_service)
        self.assertEqual(self.parser._generate_title(message), "‚úèÔ∏è New chat title")

    def test_generate_title_video_chat_started(self):
        mock_service = MagicMock()
        mock_service.__str__ = MagicMock(return_value="pyrogram.enums.MessageService.VIDEO_CHAT_STARTED")
        message = self._create_mock_message(service=mock_service)
        self.assertEqual(self.parser._generate_title(message), "‚ñ∂Ô∏è Video chat started")

    def test_generate_title_video_chat_ended(self):
        mock_service = MagicMock()
        mock_service.__str__ = MagicMock(return_value="pyrogram.enums.MessageService.VIDEO_CHAT_ENDED")
        message = self._create_mock_message(service=mock_service)
        self.assertEqual(self.parser._generate_title(message), "‚èπ Video chat ended")

    def test_generate_title_video_chat_scheduled(self):
        mock_service = MagicMock()
        mock_service.__str__ = MagicMock(return_value="pyrogram.enums.MessageService.VIDEO_CHAT_SCHEDULED")
        message = self._create_mock_message(service=mock_service)
        self.assertEqual(self.parser._generate_title(message), "‚è∞ Video chat scheduled")

    def test_generate_title_group_chat_created(self):
        mock_service = MagicMock()
        mock_service.__str__ = MagicMock(return_value="pyrogram.enums.MessageService.GROUP_CHAT_CREATED")
        message = self._create_mock_message(service=mock_service)
        self.assertEqual(self.parser._generate_title(message), "‚ú® Group chat created")

    def test_generate_title_delete_chat_photo(self):
        mock_service = MagicMock()
        mock_service.__str__ = MagicMock(return_value="pyrogram.enums.MessageService.DELETE_CHAT_PHOTO")
        message = self._create_mock_message(service=mock_service)
        self.assertEqual(self.parser._generate_title(message), "üóëÔ∏è Chat photo deleted")

    def test_generate_title_text_only(self):
        message = self._create_mock_message(text="This is the first line.\nThis is the second line.")
        self.assertEqual(self.parser._generate_title(message), "This is the first line") #first line and remove dot

    def test_generate_title_text_with_html(self):
        message = self._create_mock_message(text="<b>Bold</b> text first line.\n<i>Italic</i> second line.")
        self.assertEqual(self.parser._generate_title(message), "Bold text first line") #first line and remove tags and dot

    def test_generate_title_text_with_url_and_text(self):
        message = self._create_mock_message(text="Check out this link: https://example.com")
        self.assertEqual(self.parser._generate_title(message), "Check out this link") # URL is stripped

    def test_generate_title_text_only_url(self):
        message = self._create_mock_message(text="https://example.com")
        self.assertEqual(self.parser._generate_title(message), "üîó Web link")

    def test_generate_title_text_only_youtube_url(self):
        message = self._create_mock_message(text="https://www.youtube.com/watch?v=dQw4w9WgXcQ")
        self.assertEqual(self.parser._generate_title(message), "üé• YouTube Link")

    def test_generate_title_text_only_youtu_be_url(self):
        message = self._create_mock_message(text="https://youtu.be/dQw4w9WgXcQ")
        self.assertEqual(self.parser._generate_title(message), "üé• YouTube Link")

    def test_generate_title_caption_with_url_and_text(self):
        message = self._create_mock_message(media=MessageMediaType.PHOTO, caption="Look at this photo! https://example.com/image.jpg")
        self.assertEqual(self.parser._generate_title(message), "üì∑ Photo")

    def test_generate_title_caption_with_uppercase_text(self):
        message = self._create_mock_message(text="–ñ–ò–ó–ù–¨ –ù–ê –û–ë–û–Ø–•")
        self.assertEqual(self.parser._generate_title(message), "–ñ–∏–∑–Ω—å –Ω–∞ –æ–±–æ—è—Ö") #downcase 

    def test_generate_title_long_text_trimming(self):
        long_text = "This is a very long line of text that definitely exceeds the maximum length allowed for a title, so it should be trimmed intelligently at the last space before the limit."
        message = self._create_mock_message(text=long_text)
        expected_title = "This is a very long line of text that..." #cut at 37
        self.assertEqual(self.parser._generate_title(message), expected_title)

    def test_generate_title_break_word_after_limit(self):
        # Test with a specific text example from the user's query
        text = "–ù–∞ –ø—Ä–æ—à–ª–æ–π –Ω–µ–¥–µ–ª–µ –ø—Ä–µ–¥–ª–æ–∂–∏–ª —Å–≤–æ–∏–º –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å, –∫–∞–∫ –±—ã –æ–Ω–∏ —Ö–æ—Ç–µ–ª–∏ —É–ª—É—á—à–∏—Ç—å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞"
        message = self._create_mock_message(text=text)
        expected_title = "–ù–∞ –ø—Ä–æ—à–ª–æ–π –Ω–µ–¥–µ–ª–µ –ø—Ä–µ–¥–ª–æ–∂–∏–ª —Å–≤–æ–∏–º –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º..."
        self.assertEqual(self.parser._generate_title(message), expected_title)

    def test_generate_title_long_text_no_space_trimming(self):
        long_text = "Thisisaverylonglineoftextthatdefinitelyexceedsthemaximumlengthallowedforatitlesoitshouldbetrimmedatthelimitbecausehasnospaces."
        message = self._create_mock_message(text=long_text)
        expected_title = "Thisisaverylonglineoftextthatdefinitelyexceedsthema..." #cut at 30+15 symbols without space
        self.assertEqual(self.parser._generate_title(message), expected_title)

    def test_generate_title_text_with_only_html_and_urls(self):
        message = self._create_mock_message(text="<a href='https://example.com'>Link name</a> https://another.link")
        self.assertEqual(self.parser._generate_title(message), "Link name")

    def test_generate_title_empty_text_after_cleaning(self):
        message = self._create_mock_message(text="<br>  https://link.com \n ")
        self.assertEqual(self.parser._generate_title(message), "üîó Web link")


    def test_generate_title_webpage_preview_ignored_with_media(self):
        web_page_mock = MagicMock()
        message = self._create_mock_message(media=MessageMediaType.PHOTO, web_page=web_page_mock)
        self.assertEqual(self.parser._generate_title(message), "üì∑ Photo") # Media has higher priority

    def test_generate_title_webpage_preview_ignored_with_text(self):
        web_page_mock = MagicMock()
        message = self._create_mock_message(text="Some text", web_page=web_page_mock)
        self.assertEqual(self.parser._generate_title(message), "Some text") # Text has higher priority than fallback web page

    def test_generate_title_fallback_unknown(self):
        message = self._create_mock_message() # No text, no media, no webpage
        # Use variable to capture the actual value
        result = self.parser._generate_title(message)
        self.assertIn("Unknown Post", result)  # Just check if it contains "Unknown Post"

    def test_generate_title_poll_media_type(self):
        # Create a mock poll object with question
        poll_mock = MagicMock()
        poll_mock.question = "–ö–∞–∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ?"
        message = self._create_mock_message(media=MessageMediaType.POLL, poll=poll_mock)
        
        # Test should check that poll.question is used for title
        self.assertEqual(self.parser._generate_title(message), "üìä Poll: –ö–∞–∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ?")

    def test_generate_title_webpage_media_type(self):
        # Webpage media type should be ignored for title generation, text should be used
        message = self._create_mock_message(media=MessageMediaType.WEB_PAGE, text="Check this out")
        self.assertEqual(self.parser._generate_title(message), "Check this out")

    def test_generate_title_webpage_with_url_text(self):
        """Test case that reproduces real issue with VK video link."""
        # –°–æ–∑–¥–∞–µ–º –º–æ–∫ –¥–ª—è web_page
        web_page_mock = MagicMock()
        web_page_mock.title = "Web page title"
        
        # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º URL –∏ mock web_page
        message = self._create_mock_message(
            web_page=web_page_mock, 
            text="https://vkvideo.ru/video295754128_456239449"
        )
        
        self.assertEqual(self.parser._generate_title(message), "üîó Web page title")
    
    def test_generate_title_webpage_without_url_text(self):
        web_page_mock = MagicMock()
        web_page_mock.title = "Web page title"
        message = self._create_mock_message(web_page=web_page_mock) # Text is whitespace only
        self.assertEqual(self.parser._generate_title(message), "üîó Web page title")

    def test_generate_title_punctuation_removal(self):
        """Test removing punctuation marks from the end of titles."""
        test_cases = {
            # –û–¥–∏–Ω–æ—á–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
            "–ü—Ä–∏–≤–µ—Ç.": "–ü—Ä–∏–≤–µ—Ç",
            "–ü—Ä–∏–≤–µ—Ç,": "–ü—Ä–∏–≤–µ—Ç",
            "–ü—Ä–∏–≤–µ—Ç;": "–ü—Ä–∏–≤–µ—Ç",
            "–ü—Ä–∏–≤–µ—Ç:": "–ü—Ä–∏–≤–µ—Ç",
            "–ü—Ä–∏–≤–µ—Ç!": "–ü—Ä–∏–≤–µ—Ç!",
            
            # –ö–æ–º–±–∏–Ω–∞—Ü–∏—è —Å–∏–º–≤–æ–ª–æ–≤
            "–ü—Ä–∏–≤–µ—Ç...": "–ü—Ä–∏–≤–µ—Ç",
            "–ü—Ä–∏–≤–µ—Ç.,;:": "–ü—Ä–∏–≤–µ—Ç",
            "–ü—Ä–∏–≤–µ—Ç.!": "–ü—Ä–∏–≤–µ—Ç.!",
            "–°—Ç—Ä–æ–∫–∞.....": "–°—Ç—Ä–æ–∫–∞",
            
            # –°–∏–º–≤–æ–ª—ã –Ω–µ –≤ –∫–æ–Ω—Ü–µ –Ω–µ –¥–æ–ª–∂–Ω—ã —É–¥–∞–ª—è—Ç—å—Å—è
            "–ü—Ä–∏.–≤–µ—Ç": "–ü—Ä–∏.–≤–µ—Ç",
            "–ü—Ä–∏,–≤–µ—Ç": "–ü—Ä–∏,–≤–µ—Ç",
            "–ü—Ä–∏;–≤–µ—Ç": "–ü—Ä–∏;–≤–µ—Ç",
            "–ü—Ä–∏:–≤–µ—Ç": "–ü—Ä–∏:–≤–µ—Ç",
            "–ü—Ä–∏!–≤–µ—Ç": "–ü—Ä–∏!–≤–µ—Ç",
            "–ü—Ä–∏\"–≤–µ—Ç": "–ü—Ä–∏\"–≤–µ—Ç",
            "–ü—Ä–∏'–≤–µ—Ç": "–ü—Ä–∏'–≤–µ—Ç",
            "–ü—Ä–∏–≤–µ—Ç": "–ü—Ä–∏–≤–µ—Ç",
            
            # –°—Ç—Ä–æ–∫–∏ —Å –ø—Ä–æ–±–µ–ª–∞–º–∏ –ø–æ—Å–ª–µ –ø—É–Ω–∫—Ç—É–∞—Ü–∏–∏
            "–ü—Ä–∏–≤–µ—Ç. ": "–ü—Ä–∏–≤–µ—Ç",
            "–ü—Ä–∏–≤–µ—Ç, ": "–ü—Ä–∏–≤–µ—Ç",
            
            # –Ø–∑—ã–∫–∏
            "–ü—Ä–∏–≤–µ—Ç –Ω–∞ —Ä—É—Å—Å–∫–æ–º.": "–ü—Ä–∏–≤–µ—Ç –Ω–∞ —Ä—É—Å—Å–∫–æ–º",
            "Hello.": "Hello",
            "Hello,": "Hello",
            "–ü—Ä–∏–≤—ñ—Ç —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é.": "–ü—Ä–∏–≤—ñ—Ç —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é",
            "Hola en espa√±ol.": "Hola en espa√±ol",
            
            # –¶–∏—Ñ—Ä—ã
            "–ß–∏—Å–ª–æ 123.": "–ß–∏—Å–ª–æ 123",
            
            # –ú–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω—ã–π —Ç–µ–∫—Å—Ç
            "–ü—Ä–∏–≤–µ—Ç.\n–ö–∞–∫ –¥–µ–ª–∞?": "–ü—Ä–∏–≤–µ—Ç",
            
            # –°–ª–æ–∂–Ω—ã–µ —Å–ª—É—á–∞–∏ —Å –∫–∞–≤—ã—á–∫–∞–º–∏
            "–¢–µ–∫—Å—Ç —Å \"–∫–∞–≤—ã—á–∫–∞–º–∏ –≤–Ω—É—Ç—Ä–∏\".": "–¢–µ–∫—Å—Ç —Å \"–∫–∞–≤—ã—á–∫–∞–º–∏ –≤–Ω—É—Ç—Ä–∏\"",
            "–¢–µ–∫—Å—Ç —Å '–æ–¥–∏–Ω–∞—Ä–Ω—ã–º–∏' –∫–∞–≤—ã—á–∫–∞–º–∏.": "–¢–µ–∫—Å—Ç —Å '–æ–¥–∏–Ω–∞—Ä–Ω—ã–º–∏' –∫–∞–≤—ã—á–∫–∞–º–∏",
            "–¢–µ–∫—Å—Ç —Å \"–≤–ª–æ–∂–µ–Ω–Ω—ã–º–∏ '–∫–∞–≤—ã—á–∫–∞–º–∏'\".": "–¢–µ–∫—Å—Ç —Å \"–≤–ª–æ–∂–µ–Ω–Ω—ã–º–∏ '–∫–∞–≤—ã—á–∫–∞–º–∏'\"",
            "–¶–∏—Ç–∞—Ç–∞: \"–≠—Ç–æ —Ü–∏—Ç–∞—Ç–∞.\".": "–¶–∏—Ç–∞—Ç–∞: \"–≠—Ç–æ —Ü–∏—Ç–∞—Ç–∞.\"",
            
            # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–ª—É—á–∞–∏
            "–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Å –≤–æ—Å–∫–ª–∏—Ü–∞–Ω–∏–µ–º!": "–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Å –≤–æ—Å–∫–ª–∏—Ü–∞–Ω–∏–µ–º!",
            "–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Å –≤–æ–ø—Ä–æ—Å–æ–º?": "–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Å –≤–æ–ø—Ä–æ—Å–æ–º?", 
            "–≠–ª–ª–∏–ø—Å–∏—Å...": "–≠–ª–ª–∏–ø—Å–∏—Å",
            
            "–ö–æ–Ω–µ—Ü —Ç–µ–∫—Å—Ç–∞.,;:": "–ö–æ–Ω–µ—Ü —Ç–µ–∫—Å—Ç–∞",
            "–ú–Ω–æ–≥–æ —Ç–æ—á–µ–∫....": "–ú–Ω–æ–≥–æ —Ç–æ—á–µ–∫",
            "–†–∞–∑–Ω—ã–µ –∑–Ω–∞–∫–∏.,;": "–†–∞–∑–Ω—ã–µ –∑–Ω–∞–∫–∏",
            
            # –†–µ–∞–ª—å–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã
            "–ê–Ω–æ–Ω—Å –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏:": "–ê–Ω–æ–Ω—Å –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏",
            "–ù–æ–≤—ã–π —Ä–µ–ª–∏–∑ v1.0!": "–ù–æ–≤—ã–π —Ä–µ–ª–∏–∑ v1.0!",
            "–í–∞–∂–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è!!!": "–í–∞–∂–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è!!!",
            "–ê–≤—Ç–æ—Ä —Å–∫–∞–∑–∞–ª: \"–≠—Ç–æ –≤–∞–∂–Ω–æ\".": "–ê–≤—Ç–æ—Ä —Å–∫–∞–∑–∞–ª: \"–≠—Ç–æ –≤–∞–∂–Ω–æ\"",
            "–ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º—ã: function() { return true; }": "–ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º—ã: function() { return true...",
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∞–µ–≤—ã–µ —Å–ª—É—á–∞–∏
            "–°—Ç–∞—Ç—å—è...": "–°—Ç–∞—Ç—å—è",
            "–í–æ–ø—Ä–æ—Å—ã –∏ –æ—Ç–≤–µ—Ç—ã.": "–í–æ–ø—Ä–æ—Å—ã –∏ –æ—Ç–≤–µ—Ç—ã",
            "–ö–æ–Ω–µ—Ü,": "–ö–æ–Ω–µ—Ü",
        }
        
        for input_text, expected_output in test_cases.items():
            message = self._create_mock_message(text=input_text)
            title = self.parser._generate_title(message)
            self.assertEqual(title, expected_output, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ '{input_text}': –ø–æ–ª—É—á–µ–Ω–æ '{title}', –æ–∂–∏–¥–∞–ª–æ—Å—å '{expected_output}'")

if __name__ == '__main__':
    unittest.main() 
